
...........................................................................................................
                        port98 issue with multi hosts - success code
                        
package org.hidetake.groovy.ssh.session
import groovy.transform.CompileStatic

node('hydra') {
    stage('1') {
        properties([parameters([stringParam(defaultValue: 'web20.lab1.ariba.com,web22.lab1.ariba.com,web23.lab1.ariba.com,web24.lab1.ariba.com', description: 'hostnames', name: 'hosts'),
		stringParam(defaultValue: 'svcload3', description: 'isFoo should be false', name: 'username'),
       stringParam(defaultValue: 'ows', description: 'isFoo should be false', name: 'product'),
       stringParam(defaultValue: 'Alabaster-98', description: 'isFoo should be false', name: 'build'),
		
		])])
		
	//	def hosts = params.hostname
   def user = params.username
   def products = params.product
   def builds = params.build
   
   echo "hostsdetails: ${hosts} username: ${user} product: ${products} build: ${builds}"
   
        def theURL = params.hosts
        def pieces = theURL.split(',')
     //   println 'theURL is: ' + theURL + '\n'
        println 'tokenizedURL: ' + pieces + '\n'       
      //  echo "array0: ${pieces[0]}"
    //    echo "array1: ${pieces[1]}"
     //   echo "array2: ${pieces[2]}"
        println pieces.length
        for (def i=0; i < pieces.size(); i++) {   
		
                echo "hostname: ${pieces[i]}"
				def remote = [:]
  remote.name = 'web'
  remote.host = "${pieces[i]}"
  remote.user = "${user}"
  remote.password = 'k@b@di$vcdev'
  remote.allowAnyHosts = true
    sshCommand remote: remote, command: "hostname;id;ps aux | grep -i /home/${user}/${products}/${builds}/bin | wc -l"
//	| grep -v grep  | awk '{print \$2}' | xargs -r kill -9 ; echo \$? > /tmp/2;ps aux | grep -i /home/${user}/${products}/${builds}/bin  | grep -v grep  | wc -l  "
  
        }
    }
    
    }

....................................................................................................
                              By using script pipeline (DSL) - no errors but script not completed
node('hydra') {
     
   properties([parameters([stringParam(defaultValue: '3', description: 'number of hosts', name: 'hc'),])])
    def c = params.hc
    stage('test'){
        def hostname = []
        echo " count: ${c}"
        def al = hostname.size()
        echo "array size ${al}"
    if( "${c}" == "${al}" ) {echo "finished"}
        else {
            echo "not matched"
        def ui = input message: '', parameters: [string(defaultValue: 'web20', description: '', name: 'hostadd', trim: true)]
        echo "input value: ${ui}"
        
    hostname << "${ui}"
    println hostname
        }


                

    }
}

................................................................................................................................
                         By using Declarative pipeline - No errors but script not completed
     
//    if ( "${params.hc}" != "${hostname.size()}" ) { }
pipeline {
     agent { label 'hydra'}
     environment {
        
        al = 'hostname.size()'
     }
    parameters {
        string(defaultValue: "3", description: 'What environment?', name: 'hc')
     string(defaultValue: "3", description: 'What environment?', name: 'hc1')
    }
    stages {
        stage("robot test") {
            steps {
                print params.hc     
                script {
                    hostname = ["1"]
                if ( "${params.hc}" != "${hostname.size()}" ) {
                    for (def element = 0; element < hostname.size(); element++) {
                            echo "${element} ${hostname.size()}"
                           
                            echo "${hostname.size()}"
                        }
                     hostname += "hai"
                                  }
                
                }
            }
        }
    }
}
